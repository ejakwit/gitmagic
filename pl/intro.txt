== Wstęp ==

Posłużę się analogią do wyjaśnienia czym jest system kontroli wersji. Bardziej sformalizowaną definicję znajdziesz na http://pl.wikipedia.org/wiki/System_kontroli_wersji[stronie Wikipedii poświęconej systemom kontroli wersji]. 

=== Praca jako gra ===

Grałem w gry komputerowe przez prawie całe swoje życie. W przeciwieństwie do tego, systemów kontroli wersji zacząłem używać jako dorosły. Podejrzewam, że nie jestem w tym osamotniony, a w związku z tym, porównanie tych dwóch konceptów sprawi, że wyjaśnienie i zrozumienie ich stanie się prostsze.

Pomyśl o edycji kodu, lub dokumentu, jak o graniu w grę komputerową. Po dokonaniu wielu zmian, chciałbyś zapisać efekty pracy. Aby to uczynisz, klikasz 'Zapisz' w swoim edytorze.

Taka operacja nadpisze starą wersję. Przypomina to stare gry komputerowe, w których możliwy był zapis tylko jednego stanu gry: oczywiście zapis taki był możliwy, ale nie można było załadować stanu innego niż ostatnio zapisany. Wielka szkoda, ponieważ starszy stan gry mógł odpowiadać wyjątkowo interesującemu fragmentowi gry do którego chciałbyś któregoś dnia powrócić. Albo co gorsza, twój obecnie zapisany stan gry uniemożliwia dokończenie gry i będziesz musiał zacząć grę od początku.  

=== Kontrola wersji ===

W trakcie edycji, możesz użyć opcji 'Zapisz jako' inny plik, albo skopiować plik do innej lokalizacji przed wykonaniem operacji 'Zapisz' po to aby ocalić starszą wersję. Może również kompresować poprzednie wersje, aby zaoszczędzić przestrzeni. Jest to prymitywna i czasochłonna forma kontroli wersji. Gry komputerowe usprawniły ten proces dawno temu, poprzez umożliwienie zapisania wielu stanów gry powiązanych z informacją o czasie wykonania operacji. 

Rozważmy bardziej skomplikowany przypadek. Wyobraźmy sobie, że mamy zestaw plików które muszą ze sobą współdziałać, np. kod źródłowy projektu albo pliki strony internetowej. W tej sytuacji, gdybyś chciał zachować starszą wersję musiałbyś zarchiwizować cały katalog. Przechowywanie wielu wersji staje się niewygodne i szybko zaczyna być kosztowne.

W niektórych grach, zapisany stan zawiera katalog pełen plików. Takie gry ukrywają szczegóły przed graczem i udostępniają wygodny interfejs do zarządzania różnymi wersjami tego katalogu.

Systemy kontroli wersji działają tak samo. Wszystkie mają wygodne interfejsy służące do zarządzania katalogiem zawierającym różne rzeczy. Możesz często zapisywać stan katalogu, a w razie potrzeby masz możliwość odtworzenia dowolnego stanu z przeszłości. W przeciwieństwie do większości gier, systemy kontroli wersji są sprytne w zakresie oszczędzania przestrzeni. Zwykle, tylko kilka plików uległo zmianom pomiędzy wersjami a ich charakter jest drobny. Przechowywanie informacji o różnicach pomiędzy plikami zamiast kopiowania plików pozwala zaoszczędzić przestrzeń. 

=== Distributed Control ===

Now imagine a very difficult computer game. So difficult to finish that many experienced gamers all over the world decide to team up and share their saved games to try to beat it. Speedruns are real-life examples: players specializing in different levels of the same game collaborate to produce amazing results.

How would you set up a system so they can get at each other's saves easily? And upload new ones?

In the old days, every project used centralized version control. A server somewhere held all the saved games. Nobody else did. Every player kept at most a few saved games on their machine. When a player wanted to make progress, they'd download the latest save from the main server, play a while, save and upload back to the server for everyone else to use.

What if a player wanted to get an older saved game for some reason? Maybe the current saved game is in an unwinnable state because somebody forgot to pick up an object back in level three, and they want to find the latest saved game where the game can still be completed. Or maybe they want to compare two older saved games to see how much work a particular player did.

There could be many reasons to want to see an older revision, but the outcome is the same. They have to ask the central server for that old saved game. The more saved games they want, the more they need to communicate.

The new generation of version control systems, of which Git is a member, are known as distributed systems, and can be thought of as a generalization of centralized systems. When players download from the main server they get every saved game, not just the latest one. It's as if they're mirroring the central server.

This initial cloning operation can be expensive, especially if there's a long history, but it pays off in the long run. One immediate benefit is that when an old save is desired for any reason, communication with the central server is unnecessary.

=== A Silly Superstition ===

A popular misconception is that distributed systems are ill-suited for projects requiring an official central repository. Nothing could be further from the truth. Photographing someone does not cause their soul to be stolen. Similarly, cloning the master repository does not diminish its importance.

A good first approximation is that anything a centralized version control system can do, a well-designed distributed system can do better. Network resources are simply costlier than local resources. While we shall later see there are drawbacks to a distributed approach, one is less likely to make erroneous comparisons with this rule of thumb.

A small project may only need a fraction of the features offered by such a
system, but using systems that scale poorly for tiny projects is like using
Roman numerals for calculations involving small numbers.

Moreover, your project may grow beyond your original expectations. Using Git from the outset is like carrying a Swiss army knife even though you mostly use it to open bottles. On the day you desperately need a screwdriver you'll be glad you have more than a plain bottle-opener.

=== Merge Conflicts ===

For this topic, our computer game analogy becomes too thinly stretched. Instead, let us again consider editing a document.

Suppose Alice inserts a line at the beginning of a file, and Bob appends one at the end of his copy. They both upload their changes. Most systems will automatically deduce a reasonable course of action: accept and merge their changes, so both Alice's and Bob's edits are applied.

Now suppose both Alice and Bob have made distinct edits to the same line. Then it is impossible to proceed without human intervention. The second person to upload is informed of a _merge conflict_, and must choose one edit over another, or revise the line entirely.

More complex situations can arise. Version control systems handle the simpler cases themselves, and leave the difficult cases for humans. Usually their behaviour is configurable.
