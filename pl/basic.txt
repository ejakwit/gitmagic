== Podstawowe triki ==

Zamiast zgłębiać ogrom komend Gita możesz użyć tych podstawowych przedstawionych w tym rozdziale co umożliwi Ci szybkie osiągnięcie celu. Pomimo swojej prostoty, każda z nich jest użyteczna.  
Co więcej, w trakcie pierwszych miesięcy korzystania z Gita, nigdy nie potrzebowałem wiedzy spoza tego rozdziału.

=== Zapisywanie stanu ===

Chcesz wprowadzić ryzykowną zmianę? Zanim to zrobisz, użyj poniższych komend żeby zapisać stan wszystkich plików w aktualnym folderze:

 $ git init
 $ git add .
 $ git commit -m "Mój pierwszy backup"

Jeśli wprowadzisz złe zmiany, możesz odzyskać poprzednie wersję za pomocą komendy:

 $ git reset --hard

Aby ponownie zapisać stan zmienionych plików:

 $ git commit -a -m "Kolejny backup"

=== Dodawanie, usuwanie, zmiana nazwy ===

Powyższe komendy śledzą zmiany w plikach które były dostępne, gdy pierwszy raz wykonano komendę *git add*. Jeśli dodasz nowe pliki albo podkatalogi, wtedy musisz poinformować o tym Gita:

 $ git add readme.txt Documentation

Analogicznie, jeśli chcesz aby Git zapomniał o plikach:

 $ git rm kludge.h obsolete.c
 $ git rm -r incriminating/evidence/

Git skasuje za Ciebie te pliki, jeśli jeszcze je tam znajdzie.

Zmiana nazwy pliku polega na usunięciu starej nazwy i dodaniu nowej. Istnieje skrót *git mv* posiadający taką samą składnię jak komenda *mv*. Na przykład:

 $ git mv bug.c feature.c

=== Zaawansowane Cofnij/Powtórz ===

Czasami chcesz po prostu wrócić i zapomnieć o każdej zmianie od pewnego punktu w czasie, ponieważ wszystkie późniejsze zmiany były błędne. W takiej sytuacji:

 $ git log

pokazuje listę ostatnich wprowadzonych zmian oraz ich sum kontrolnych SHA1:

----------------------------------
commit 766f9881690d240ba334153047649b8b8f11c664
Author: Bob <bob@example.com>
Date:   Tue Mar 14 01:59:26 2000 -0800

    Replace printf() with write().

commit 82f5ea346a2e651544956a8653c0f58dc151275c
Author: Alice <alice@example.com>
Date:   Thu Jan 1 00:00:00 1970 +0000

    Initial commit.
----------------------------------

Pierwsze kilka znaków sumy kontrolnej jest wystarczające do określenia zmiany; ewentualnie, możesz skopiować i wkleić całą sumę kontrolną. Wpisz:

 $ git reset --hard 766f

aby przywrócić stan z określonego punktu czasowego i trwale usunąć informacje o wszystkich wprowadzonych później zmianach.

Jeśli chcesz tymczasowo powrócić do poprzedniego stany, wpisz:

 $ git checkout 82f5

Ta komenda cofnie Cię w czasie, jednocześnie zachowując nowsze wersje. Podobnie jak w przypadku podróży w czasie, jeśli dokonasz zmian na przeszłej wersji a następnie zapiszesz wersję w repozytorium przy pomocy komendy commit znajdziesz się w alternatywnej rzeczywistości, ponieważ twoje akcje są inne niż gdy wykonywałeś je za pierwszym razem. 

Tą alternatywną rzeczywistość nazywamy 'gałęzią' (ang. branch) i <<branch, omówimy dokładnie w dalszej części>>. W tym momencie, zapamiętaj że: 

 $ git checkout master

przeniesię Cię z powrotem do teraźniejszości. Aby uniknąć narzekań Gita, zawsze wykonaj commit lub reset na swoich zmianach zanim wykonasz checkout. 

Wracając do analogii z grami komputerowymi:

- *`git reset --hard`*: otwiera starszy stan gry i kasuje wszystkie zapisane stany gry nowsze niż właśnie załadowany

- *`git checkout`*:  otwiera starszy stan gry, ale jeśli będziesz na nim grał, to stan gry będzie różnił się od nowszych stanów gry zapisanych, gdy grałeś po raz pierwszy. W związku z tym, nowe stany gry będą zapisywane na osobnej gałęzi reprezentującej alternatywną rzeczywistość do której wkroczyłeś. <<branch,Omówimy to w dalszej części>>. 

Możesz otworzyć jedynie wybrane pliki i podkatalogi poprzez dopisanie ich na końcu komendy:

 $ git checkout 82f5 jakis.plik jakis_inny.plik

Bądź ostrożny, ponieważ ta postać komendy *checkout* może po cichu nadpisać pliki. Aby nie utracić zmian, wywołaj komendę commit przed wywowałeniem checkou checkout, zwłaszcza jeśli uczysz się Gita. Ogólnie, jeśli masz wątpliwości czy wykonać daną komendę, uruchom najpierw *git commit -a*. 

Jeśli nie lubisz kopiowania i wklejania sum kontrolnych, użyj komendy: 

 $ git checkout :/"Mój pierwszy b"

aby przeskoczyć do wersji zaczynającej się od podanego tekstu.
Możesz również odtworzyć 5-tą zapisanę wersję:

 $ git checkout master~5

=== Przywracanie (revert) ===

Zdarzenie w sądzie mogą zostać wyłączone z protokołu. Podobnie w Gicie, możesz wycofać wybranę operacje commit. Komenda:

 $ git commit -a
 $ git revert 1b6d

wycofa tylko commit określony przez podaną sumę kontrolną. Wycofanie wersji zostanie zapisane jako kolejna operacja commit, co możesz sprawdzić poprzez wykonanie komendy *git log*.

=== Generowanie changeloga ===

Niektóre projekty wymagają http://pl.wikipedia.org/wiki/Changelog[changeloga].
Aby go wygenerować, użyj komendy:

 $ git log > ChangeLog

=== Pobieranie plików ===

Aby pobrać kopię projektu utrzymywanego w Gicie, wywołaj komendę:

 $ git clone git://server/path/to/files

Na przykład, aby pobrać wszystkie pliki stworzone na potzeby tej strony wywołaj:

 $ git clone git://git.or.cz/gitmagic.git

Wkrótce powiemy więcej na temat komendy *clone*.

=== Pobieranie najnowszej wersji ===

Jeśli pobrałeś kopię projektu za pomocą komendy *git clone*, możesz zaktualizować ją do ostatniej wersji przy pomocy komendy:

 $ git pull

=== Publikowanie zmian ===

Załóżmy, że chcemy pokazać nową wersję skryptu innym. Jednym z rozwiązań jest poproszenie innych o pobranie pliku bezpośrednio z twojego komputera. Niestety jeśli rozpoczną pobieranie w trakcie gdy modyfikujesz zawartość pliku lub wprowadzasz poprawki mogą wpaść w tarapaty. Z tego powodu, oprogramowanie udostępnia się cyklicznie w chwili gdy programiści uznają że produkt jest na to gotowy. Dzięki wykorzystaniu Gita, zespół programistów może intensywnie pracować nad projektem wykorzystującym Gita oraz udostępniać określoną wersję użytkownikom w momencie gdy kod jest na to gotowy. 

Aby to zrealizować, należy wykonać następującą komendę z katalogu w który znajduje się skrypt:

 $ git init
 $ git add .
 $ git commit -m "Pierwsza opublikowana wersja"

Następnie poproś użytkowników o wywołanie komendy:

 $ git clone adres.twojego.komputera:/ścieżka/do/skryptu

w celu pobrania ostatniej opublikowanej wersji skryptu. Powyższa komenda zakłada, użytkownicy mają dostęp SSH do twojej maszyny. Jeśli tak nie jest, uruchom *git daemon* i poproś użytkowników o wywołanie następującej komendy w zamian:

 $ git clone git://adres.twojego.komputera/ścieżka/do/skryptu

Od tego momentu, za każdym razem gdy uznasz że nowa wersja skryptu jest gotowa do opublikowania wywołaj:

 $ git commit -a -m "Następna opublikowana wersja"

oraz po stronie użytkowników konieczne będzie uruchomienie następującej komendy w folderze zawierającym skrypt:

 $ git pull

Twoi użytkownicy nigdy nie pobiorą wersji skryptu której nie chciałeś opublikować.

=== Wyświetlanie swoich zmian ===

Aby dowiedzieć się jakie zmiany zrobiono po ostatniej operacji commit użyj komendy:

 $ git diff

Jeśli interesują nas zmiany od wczoraj:

 $ git diff "@{yesterday}"

Jeśli chcemy zobaczyć zmiany pomiędzy określoną wersją a 2 wersjami wstecz względem wersji aktualnej:

 $ git diff 1b6d "master~2"

W każdy z powyższych przypadków, na wyjściu otrzymamy patch(łatkę) który możemy nanieść komendą *git apply*. 
Spróbuj również:

 $ git whatchanged --since="2 weeks ago"

Często przeglądam historię zmian przy użyciu http://sourceforge.net/projects/qgit[qgit], z powodu jego schludnego i fotogenicznego interfejsu albo http://jonas.nitro.dk/tig/[tig], tekstowego interfejsu który działa dobrze w oparciu o wolne połączenia sieciowe. Kolejną opcją jest zainstalowanie serwera WWW, wykonanie komendy *git instaweb* i uruchomienie interfejsu GITa w dowolnej przeglądarce.

=== Ćwieczenie ===

Niech A, B, C, D będą czterema kolejnymi wersjami, gdzie B różni się od A tym że niektóre pliki zostały skasowane. Twoim zadaniem jest przywrócenie skasowanych plików z powrotem do wersji D. Jak to osiągniesz?

Istnieją przynajmniej 3 rozwiązania tego problemu. Zakładając że obecną wersją jest D:

  1. Wersje A i B różnią się jedynie usuniętymi plikami. Możemy stworzyć patch odpowiadający tym zmianom a następnie nanieść go na obecną wersję:

   $ git diff B A | git apply

  2. Ponieważ zapisaliśmy skasowane pliki w wersji A, możemy odtworzyć je komendą:

   $ git checkout A foo.c bar.h

  3. Możemy spojrzeć na przejście z wersji A do B jak na zmianę którą chcemy anulować:

   $ git revert B

Które rozwiązanie jest najlepsze? Którekolwiek ci najbardziej odpowiada. Przy użyciu Gita łatwo osiągnąć cel oraz zwykle jest wiele dróg do osiągnięcia go.
